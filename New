import os
import csv
from tkinter import Tk, filedialog

# ========= USER CONFIGURABLE SETTINGS ========= #

DOMAIN_KEYWORDS = {
    "peach": "Peachdomain",
    "carrot": "Carrotdomain",
    "cheese": "Cheesedomain",
}

EXCLUDE_PHRASES = ["apple pie", "cherry pie", "pumpkin pie"]

# Weighted average columns (0-based)
WEIGHT_COLUMN_INDEX = 3   # D column
VALUE_COLUMN_INDEX = 5    # F column

# ============================================== #

def detect_domain_from_filename(filename):
    """Return domain name if keyword found in filename; otherwise None."""
    lower_name = filename.lower()
    for keyword, domain_name in DOMAIN_KEYWORDS.items():
        if keyword in lower_name:
            return domain_name
    return None


def read_and_process_tsv(file_path, domain_name):
    """Read TSV, separate thresh/opps rows, compute weighted avg."""
    thresh_rows, opps_rows = [], []
    weights, values = [], []

    with open(file_path, "r", encoding="utf-8-sig") as f:
        reader = csv.reader(f, delimiter="\t")
        for i, row in enumerate(reader, start=1):
            if not row or not row[0].startswith("#"):
                continue

            text_line = "\t".join(row)

            # Ensure the 4th column exists
            if len(row) <= 3:
                print(f"ðŸš¨ ERROR: Missing 4th column in {domain_name}, line {i}")
                continue

            col4 = row[3].strip().lower()

            # Opps logic
            if (
                col4 == "null"
                or any(phrase.lower() in col4 for phrase in EXCLUDE_PHRASES)
            ):
                opps_rows.append(text_line)
                continue

            # Otherwise keep
            thresh_rows.append(text_line)

            # Weighted avg collection
            try:
                weight = float(row[WEIGHT_COLUMN_INDEX])
                value = float(row[VALUE_COLUMN_INDEX])
                weights.append(weight)
                values.append(value)
            except (ValueError, IndexError):
                # skip rows with invalid numeric data
                continue

    weighted_avg = None
    if weights and sum(weights) != 0:
        weighted_avg = (sum(w * v for w, v in zip(weights, values)) / sum(weights)) * 100

    return thresh_rows, opps_rows, weighted_avg


def main():
    Tk().withdraw()
    file_paths = filedialog.askopenfilenames(
        title="Select all domain TSV files",
        filetypes=[("TSV files", "*.tsv")]
    )
    if not file_paths:
        print("No files selected. Exiting.")
        return

    results = []

    for file_path in file_paths:
        filename = os.path.basename(file_path)
        domain_name = detect_domain_from_filename(filename)
        if not domain_name:
            domain_name = input(
                f"Couldn't detect domain for file '{filename}'. "
                "Enter domain name manually (or press Enter to skip): "
            ) or "UnknownDomain"

        thresh_rows, opps_rows, weighted_avg = read_and_process_tsv(file_path, domain_name)

        results.append({
            "domain": domain_name,
            "file": filename,
            "thresh": thresh_rows,
            "opps": opps_rows,
            "weighted_avg": weighted_avg,
            "total_intents": len(thresh_rows),
        })

    # ===== Write kept file =====
    out_dir = os.path.dirname(file_paths[0])
    thresh_path = os.path.join(out_dir, "intent_model-thresh.tsv")
    with open(thresh_path, "w", encoding="utf-8") as out:
        out.write("====== INTENT SUMMARY ======\n")
        for r in results:
            avg_text = f"{r['weighted_avg']:.1f}%" if r['weighted_avg'] else "N/A"
            out.write(f"{r['domain']} â†’ {r['total_intents']} intents, Weighted Avg: {avg_text}\n")
        out.write("============================\n\n")

        for r in results:
            avg_text = f"{r['weighted_avg']:.1f} percent" if r['weighted_avg'] else "N/A"
            out.write(f"{r['domain']}\n---------------\n")
            out.write(f"Total intents: {r['total_intents']}\n")
            out.write(f"Weighted avg: {avg_text}\n")
            for line in r["thresh"]:
                out.write(line + "\n")
            out.write("\n")

    # ===== Write opps file =====
    opps_path = os.path.join(out_dir, "intent_model-opps.tsv")
    with open(opps_path, "w", encoding="utf-8") as out:
        out.write("====== OPPS ======\n")
        for r in results:
            out.write(f"{r['domain']}\n")
            for line in r["opps"]:
                out.write(line + "\n")
            out.write("\n")

    print(f"\nâœ… Created:\n  {thresh_path}\n  {opps_path}\n")
    try:
        os.startfile(thresh_path)
    except Exception:
        pass


if __name__ == "__main__":
    main()
