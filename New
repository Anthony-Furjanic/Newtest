import os
import csv
from tkinter import Tk, filedialog

# ========= USER CONFIGURABLE SETTINGS ========= #

DOMAIN_KEYWORDS = {
    "peach": "Peachdomain",
    "carrot": "Carrotdomain",
    "cheese": "Cheesedomain",
}

EXCLUDE_PHRASES = ["apple pie", "cherry pie", "pumpkin pie"]

# Column that holds trigger words / "Null"
TARGET_COLUMN_INDEX = 4   # zero-based â†’ 5th column (adjust if needed)

# ============================================== #


def detect_domain_from_filename(filename):
    """Return domain name if keyword found in filename; otherwise None."""
    lower_name = filename.lower()
    for keyword, domain_name in DOMAIN_KEYWORDS.items():
        if keyword in lower_name:
            return domain_name
    return None


def read_and_process_tsv(file_path, domain_name):
    """Read TSV, separate kept vs. opps rows."""
    thresh_rows, opps_rows = [], []

    with open(file_path, "r", encoding="utf-8-sig") as f:
        reader = csv.reader(f, delimiter="\t")
        for i, row in enumerate(reader, start=1):
            if not row or not row[0].startswith("#"):
                continue

            text_line = "\t".join(row)

            # Ensure the target column exists
            if len(row) <= TARGET_COLUMN_INDEX:
                print(f"ðŸš¨ ERROR: Missing column {TARGET_COLUMN_INDEX+1} in {domain_name}, line {i}")
                continue

            col_value = row[TARGET_COLUMN_INDEX].strip().lower()

            # Opps logic
            if col_value == "null" or any(phrase.lower() in col_value for phrase in EXCLUDE_PHRASES):
                opps_rows.append(text_line)
                continue

            # Otherwise keep
            thresh_rows.append(text_line)

    total_kept = len(thresh_rows)
    total_opps = len(opps_rows)

    return thresh_rows, opps_rows, total_kept, total_opps


def main():
    Tk().withdraw()
    file_paths = filedialog.askopenfilenames(
        title="Select all domain TSV files",
        filetypes=[("TSV files", "*.tsv")]
    )
    if not file_paths:
        print("No files selected. Exiting.")
        return

    results = []

    for file_path in file_paths:
        filename = os.path.basename(file_path)
        domain_name = detect_domain_from_filename(filename)
        if not domain_name:
            domain_name = input(
                f"Couldn't detect domain for file '{filename}'. "
                "Enter domain name manually (or press Enter to skip): "
            ) or "UnknownDomain"

        thresh_rows, opps_rows, total_kept, total_opps = read_and_process_tsv(file_path, domain_name)

        results.append({
            "domain": domain_name,
            "file": filename,
            "thresh": thresh_rows,
            "opps": opps_rows,
            "total_kept": total_kept,
            "total_opps": total_opps
        })

    # ===== Calculate overall weighted average (by kept rows) =====
    domains_with_rows = [r for r in results if r["total_kept"] > 0]
    overall_weighted_avg = 0.0
    if domains_with_rows:
        overall_weighted_avg = (
            sum(r["total_kept"] for r in domains_with_rows) / len(domains_with_rows)
        )

    # ===== Write kept file =====
    out_dir = os.path.dirname(file_paths[0])
    thresh_path = os.path.join(out_dir, "intent_model-thresh.tsv")
    with open(thresh_path, "w", encoding="utf-8") as out:
        out.write("====== INTENT SUMMARY ======\n")
        out.write(f"Overall Weighted Avg (by row count): {overall_weighted_avg:.1f}\n")
        for r in results:
            out.write(f"{r['domain']} â†’ {r['total_kept']} rows kept\n")
        out.write("============================\n\n")

        # Domain details
        for r in results:
            out.write(f"{r['domain']}\n---------------\n")
            out.write(f"Total intents: {r['total_kept']}\n")
            for line in r["thresh"]:
                out.write(line + "\n")
            out.write("\n")

    # ===== Write opps file =====
    opps_path = os.path.join(out_dir, "intent_model-opps.tsv")
    with open(opps_path, "w", encoding="utf-8") as out:
        out.write("====== OPPS ======\n")
        for r in results:
            out.write(f"{r['domain']}\n")
            for line in r["opps"]:
                out.write(line + "\n")
            out.write("\n")

    print(f"\nâœ… Created:\n  {thresh_path}\n  {opps_path}\n")
    try:
        os.startfile(thresh_path)
    except Exception:
        pass


if __name__ == "__main__":
    main()
