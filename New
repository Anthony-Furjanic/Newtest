import os
import csv
import re
import pandas as pd
from tkinter import Tk, filedialog

# ========= USER CONFIGURABLE SETTINGS ========= #

# Keywords used to recognize each domain in the file name
DOMAIN_KEYWORDS = {
    "peach": "Peachdomain",
    "carrot": "Carrotdomain",
    "cheese": "Cheesedomain",
}

# Any rows whose 5th column contains one of these phrases OR "Null" will be filtered out
EXCLUDE_PHRASES = ["apple pie", "cherry pie", "pumpkin pie"]

# Column index (zero-based) where exclusion / "Null" check happens
TARGET_COLUMN_INDEX = 4   # i.e., the 5th column

# ============================================== #


# --- Smart domain detection -------------------------------------------------
def detect_domain_from_filename(filename):
    """Return domain name if keyword found in filename (case-insensitive, ignores spaces/dashes/underscores)."""
    name = filename.lower().replace("_", " ").replace("-", " ")
    name = re.sub(r"\s+", " ", name)  # normalize spaces

    for keyword, domain_name in DOMAIN_KEYWORDS.items():
        key = keyword.lower().replace("_", " ").replace("-", " ")
        if re.search(rf"\b{re.escape(key)}\b", name):
            return domain_name
    return None


# --- Read TSV, split kept vs opps -------------------------------------------
def read_and_process_tsv(file_path, domain_name):
    """Read TSV file, separate kept vs opps, and clean rows for TSV output."""
    thresh_rows, opps_rows = [], []

    with open(file_path, "r", encoding="utf-8-sig") as f:
        reader = csv.reader(f, delimiter="\t")
        for i, row in enumerate(reader, start=1):
            if not row or not row[0].startswith("#"):
                continue
            if len(row) <= TARGET_COLUMN_INDEX:
                print(f"üö® Missing 5th column in {domain_name}, line {i}")
                continue

            col_value = row[TARGET_COLUMN_INDEX].strip().lower()
            cleaned_intent = row[1].strip() if len(row) > 1 else ""

            # Determine if this row goes to opps
            if col_value == "null" or any(phrase.lower() in col_value for phrase in EXCLUDE_PHRASES):
                opps_rows.append(row)
            else:
                thresh_rows.append(row)

    return thresh_rows, opps_rows


# --- Main workflow ----------------------------------------------------------
def main():
    Tk().withdraw()
    file_paths = filedialog.askopenfilenames(
        title="Select all domain TSV files",
        filetypes=[("TSV files", "*.tsv")]
    )
    if not file_paths:
        print("No files selected. Exiting.")
        return

    results = []
    out_dir = os.path.dirname(file_paths[0])

    # --- Process each file
    for file_path in file_paths:
        filename = os.path.basename(file_path)
        domain_name = detect_domain_from_filename(filename)

        if not domain_name:
            domain_name = input(
                f"Could not detect domain for '{filename}'. Enter domain name manually: "
            ) or "UnknownDomain"

        thresh_rows, opps_rows = read_and_process_tsv(file_path, domain_name)
        results.append({
            "domain": domain_name,
            "file": filename,
            "thresh": thresh_rows,
            "opps": opps_rows,
        })

    # --- Calculate summary
    summary_rows = []
    for r in results:
        total_kept = len(r["thresh"])
        total_opps = len(r["opps"])
        summary_rows.append([r["domain"], total_kept, total_opps])
    total_domains = len(results)
    overall_weighted_avg = sum(len(r["thresh"]) for r in results) / total_domains if total_domains else 0

    # --- Write summary TSV (clean one-column version)
    thresh_path = os.path.join(out_dir, "intent_model-thresh.tsv")
    with open(thresh_path, "w", encoding="utf-8") as out:
        out.write("====== INTENT SUMMARY ======\n")
        out.write(f"Overall Weighted Avg (by row count): {overall_weighted_avg:.1f}\n")
        out.write("============================\n\n")
        for r in results:
            out.write(f"{r['domain']} ({len(r['thresh'])} intents)\n")
            for row in r["thresh"]:
                out.write(f"{row[1]}\n")
            out.write("\n")

    # --- Write opps TSV (clean one-column version)
    opps_path = os.path.join(out_dir, "intent_model-opps.tsv")
    with open(opps_path, "w", encoding="utf-8") as out:
        out.write("====== OPPORTUNITIES ======\n")
        for r in results:
            out.write(f"{r['domain']} ({len(r['opps'])} opps)\n")
            for row in r["opps"]:
                out.write(f"{row[1]}\n")
            out.write("\n")

    print(f"‚úÖ TSVs created in: {out_dir}")

    # --- Build Excel workbook with 7 sheets ---------------------------------
    try:
        excel_path = os.path.join(out_dir, "intent_model_full.xlsx")

        summary_df = pd.DataFrame(summary_rows, columns=["Domain", "Kept Rows", "Opps Rows"])
        summary_df.loc[len(summary_df.index)] = [
            "Overall Weighted Avg (by row count)",
            f"{overall_weighted_avg:.1f}",
            "",
        ]

        with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
            # Summary sheet
            summary_df.to_excel(writer, sheet_name="Summary", index=False)

            # Domain sheets (Intents + Opportunities per domain)
            for r in results:
                intents_df = pd.DataFrame(r["thresh"])
                opps_df = pd.DataFrame(r["opps"])
                intents_sheet = f"{r['domain']} - Intents"
                opps_sheet = f"{r['domain']} - Opportunities"

                intents_df.to_excel(writer, sheet_name=intents_sheet[:31], index=False, header=False)
                opps_df.to_excel(writer, sheet_name=opps_sheet[:31], index=False, header=False)

        print(f"‚úÖ Excel workbook created: {excel_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not create Excel workbook: {e}")

    print("\nAll tasks complete.")


if __name__ == "__main__":
    main()







from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side

try:
    # Load the workbook we just created
    wb = load_workbook(excel_path)
    ws = wb["Summary"]

    # Auto column width
    for col in ws.columns:
        max_length = 0
        col_letter = col[0].column_letter
        for cell in col:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        ws.column_dimensions[col_letter].width = max_length + 4

    # Bold headers, center align, light gray fill
    header_fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
    border = Border(
        left=Side(style="thin"), right=Side(style="thin"),
        top=Side(style="thin"), bottom=Side(style="thin")
    )

    for cell in ws[1]:
        cell.font = Font(bold=True)
        cell.fill = header_fill
        cell.alignment = Alignment(horizontal="center")
        cell.border = border

    # Apply border + center alignment to all other cells
    for row in ws.iter_rows(min_row=2):
        for cell in row:
            cell.alignment = Alignment(horizontal="center")
            cell.border = border

    wb.save(excel_path)
    print(f"‚ú® Formatted Summary sheet nicely in: {excel_path}")
except Exception as e:
    print(f"‚ö†Ô∏è Could not format Summary sheet: {e}")


