import pandas as pd
from datetime import datetime
from tkinter import Tk, filedialog
import os
from openpyxl import load_workbook
from openpyxl.styles import PatternFill

# ---------- File Picker ----------
Tk().withdraw()
print("Select all 3 Excel files (hold Ctrl or Cmd while clicking):")
selected_files = filedialog.askopenfilenames(filetypes=[("Excel files", "*.xlsx")])

# Map chosen files to domains based on filename
domain_files = {}
for file in selected_files:
    fname = os.path.basename(file).lower()
    if "d" in fname and "domain" in fname or fname.startswith("d"):
        domain_files["D"] = file
    elif "g" in fname and "domain" in fname or fname.startswith("g"):
        domain_files["G"] = file
    elif "h" in fname and "domain" in fname or fname.startswith("h"):
        domain_files["H"] = file

if len(domain_files) != 3:
    print("⚠️ Could not detect all three domains (D, G, H). Check file names and retry.")
    for f in selected_files:
        print(" -", os.path.basename(f))
    raise SystemExit

print("\n✅ Detected files:")
for domain, f in domain_files.items():
    print(f"  {domain}: {os.path.basename(f)}")

timestamp = datetime.now().strftime("%Y-%m-%d_%Hh%Mm")
output_file = f"Output_{timestamp}.xlsx"

def clean_col_c_drop_blanks(df):
    """Remove rows where column C is '(blank)' or empty."""
    c = df.columns[2]
    colC = df[c].astype(str).str.strip()
    colC = colC.mask(colC.str.lower() == "(blank)", None)
    colC = colC.replace({"": None})
    df[c] = colC
    before = len(df)
    df = df.dropna(subset=[c])
    dropped = before - len(df)
    return df, dropped

def coerce_weights_and_scores(df):
    """Ensure numeric, drop NaNs, and normalize percent scale."""
    w_col = df.columns[3]
    s_col = df.columns[5]
    df[w_col] = pd.to_numeric(df[w_col], errors='coerce')
    df[s_col] = pd.to_numeric(df[s_col], errors='coerce')

    # Drop rows with NaN in weight or score
    before = len(df)
    df = df.dropna(subset=[w_col, s_col])
    dropped = before - len(df)

    # Normalize scores to 0–100 if they look like proportions
    if df[s_col].max() <= 1.5:
        df[s_col] = df[s_col] * 100.0

    return df, w_col, s_col, dropped

def weighted_average(df, w_col, s_col):
    """Compute weighted average (in proportion form, not multiplied by 100)."""
    w_sum = df[w_col].sum()
    if w_sum == 0 or pd.isna(w_sum):
        return float('nan')
    return (df[w_col] * (df[s_col] / 100.0)).sum() / w_sum  # return as proportion (0–1)

def process_domain(filepath):
    df = pd.read_excel(filepath)
    df, dropped_blankC = clean_col_c_drop_blanks(df)
    df, w_col, s_col, dropped_nan = coerce_weights_and_scores(df)
    wavg_raw = weighted_average(df, w_col, s_col)
    wavg_percent = wavg_raw * 100.0

    # Append two summary rows
    label_col = df.columns[-2] if len(df.columns) >= 2 else df.columns[-1]
    value_col = df.columns[-1]

    rows_to_add = [
        {**{col: None for col in df.columns}, label_col: "Raw Weighted Average", value_col: f"{wavg_raw:.8f}"},
        {**{col: None for col in df.columns}, label_col: "Weighted Average (%)", value_col: f"{wavg_percent:.8f}"}
    ]
    df_out = pd.concat([df, pd.DataFrame(rows_to_add)], ignore_index=True)

    return df_out, wavg_percent, wavg_raw, dropped_blankC, dropped_nan

summary_rows = []

with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    for domain, path in domain_files.items():
        df_out, wavg_percent, wavg_raw, dropped_blankC, dropped_nan = process_domain(path)
        df_out.to_excel(writer, sheet_name=domain, index=False)
        summary_rows.append((domain, round(wavg_percent, 8)))
        print(f"{domain}: dropped {dropped_blankC} '(blank)' and {dropped_nan} NaN rows. Weighted Avg = {wavg_percent:.8f}")

    summary_df = pd.DataFrame(summary_rows, columns=["Domain", "Weighted Avg (%)"])
    overall = round(summary_df["Weighted Avg (%)"].dropna().mean(), 8)
    summary_df.loc[len(summary_df)] = ["", overall]
    summary_df.to_excel(writer, sheet_name="Summary", index=False)

# ---------- Apply Green Formatting ----------
wb = load_workbook(output_file)
green_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")

for sheet in wb.sheetnames:
    if sheet == "Summary":
        continue
    ws = wb[sheet]
    for row in ws.iter_rows():
        for cell in row:
            if cell.value and isinstance(cell.value, str) and ("Weighted Average" in cell.value):
                # Make both label and value cells green
                ws[cell.coordinate].fill = green_fill
                right_cell = ws.cell(row=cell.row, column=ws.max_column)
                right_cell.fill = green_fill

wb.save(output_file)

print(f"\n✅ Done! File saved as {output_file}")
