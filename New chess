import pandas as pd
from datetime import datetime

# --- CONFIG ---
# Map domain names to file paths
domain_files = {
    "D": "domain_D.xlsx",
    "G": "domain_G.xlsx",
    "H": "domain_H.xlsx"
}

# Output file name with timestamp
timestamp = datetime.now().strftime("%Y-%m-%d_%Hh%Mm")
output_file = f"Output_{timestamp}.xlsx"

# --- FUNCTION TO PROCESS EACH DOMAIN ---
def process_domain(domain_name, filepath):
    df = pd.read_excel(filepath)
    
    # Drop rows where column 3 (index 2) is blank
    df = df.dropna(subset=[df.columns[2]])
    
    # Ensure numeric columns
    df[df.columns[3]] = pd.to_numeric(df[df.columns[3]], errors='coerce')
    df[df.columns[5]] = pd.to_numeric(df[df.columns[5]], errors='coerce')
    
    # Drop rows with NaN in weight or score columns
    df = df.dropna(subset=[df.columns[3], df.columns[5]])
    
    # Weighted average calculation
    weighted_avg = (df[df.columns[3]] * df[df.columns[5]]).sum() / df[df.columns[3]].sum()
    
    # Append weighted average to bottom of sheet
    summary_row = pd.DataFrame([[None] * (len(df.columns) - 2) + ["Weighted Average", round(weighted_avg, 2)]],
                               columns=df.columns)
    df_out = pd.concat([df, summary_row], ignore_index=True)
    
    return df_out, round(weighted_avg, 2)

# --- MAIN PROCESS ---
summary_data = []

with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    for domain, filepath in domain_files.items():
        df_out, weighted_avg = process_domain(domain, filepath)
        df_out.to_excel(writer, sheet_name=domain, index=False)
        summary_data.append((domain, weighted_avg))
    
    # Create summary sheet
    summary_df = pd.DataFrame(summary_data, columns=["Domain", "Weighted Avg"])
    overall_avg = summary_df["Weighted Avg"].mean().round(2)
    summary_df.loc[len(summary_df)] = ["", overall_avg]
    
    summary_df.to_excel(writer, sheet_name="Summary", index=False)

print(f"âœ… All done! File saved as {output_file}")
