import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
from rapidfuzz import fuzz
import openpyxl

# Global dictionary to store labels and associated keywords
label_keywords = {}

def add_label():
    label = label_entry.get().strip()
    keywords = keyword_entry.get().strip().split(',')

    if not label or not keywords:
        messagebox.showwarning("Warning", "Please enter both a label and at least one keyword.")
        return

    keywords = [kw.strip().lower() for kw in keywords]  # Normalize keywords
    label_keywords[label] = keywords
    update_label_display()

    label_entry.delete(0, tk.END)
    keyword_entry.delete(0, tk.END)

def update_label_display():
    label_listbox.delete(0, tk.END)
    for label, keywords in label_keywords.items():
        label_listbox.insert(tk.END, f"{label}: {', '.join(keywords)}")

def remove_label():
    try:
        selected_index = label_listbox.curselection()[0]
        selected_label = label_listbox.get(selected_index).split(':')[0]
        del label_keywords[selected_label]
        update_label_display()
    except IndexError:
        messagebox.showwarning("Warning", "Please select a label to remove.")

def select_file():
    file_path = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx")])
    if file_path:
        file_entry.delete(0, tk.END)
        file_entry.insert(0, file_path)

def process_file():
    file_path = file_entry.get()
    if not file_path:
        messagebox.showwarning("Warning", "Please select an Excel file.")
        return

    if not label_keywords:
        messagebox.showwarning("Warning", "No labels have been added.")
        return

    try:
        df = pd.read_excel(file_path, engine='openpyxl')

        if "utt" not in df.columns:
            messagebox.showerror("Error", "Column 'utt' not found in the Excel file.")
            return

        threshold = threshold_slider.get()  # Get similarity threshold
        print(f"Processing file with threshold: {threshold}%")

        for index, row in df.iterrows():
            text = str(row["utt"]).strip().lower()  # Normalize text
            matched_labels = set()

            for label, keywords in label_keywords.items():
                for keyword in keywords:
                    similarity = fuzz.ratio(keyword, text)
                    if similarity >= threshold:
                        matched_labels.add(label)
                        print(f"Matched '{keyword}' with '{text}' (Similarity: {similarity}%) â†’ Assigned label: {label}")

            df.at[index, "Labels"] = ", ".join(matched_labels) if matched_labels else ""

        output_path = file_path.replace(".xlsx", "_labeled.xlsx")
        df.to_excel(output_path, index=False, engine='openpyxl')

        messagebox.showinfo("Success", f"Labeled file saved as:\n{output_path}")

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

# GUI Setup
root = tk.Tk()
root.title("Excel Fuzzy Labeling Tool")
root.geometry("600x500")

tk.Label(root, text="Label Name:").pack()
label_entry = tk.Entry(root, width=40)
label_entry.pack()

tk.Label(root, text="Keywords (comma-separated):").pack()
keyword_entry = tk.Entry(root, width=40)
keyword_entry.pack()

add_label_btn = tk.Button(root, text="Add Label", command=add_label)
add_label_btn.pack()

tk.Label(root, text="Labels & Keywords:").pack()
label_listbox = tk.Listbox(root, width=50, height=8)
label_listbox.pack()

remove_label_btn = tk.Button(root, text="Remove Selected", command=remove_label)
remove_label_btn.pack()

tk.Label(root, text="Select Excel File:").pack()
file_entry = tk.Entry(root, width=40)
file_entry.pack()
file_btn = tk.Button(root, text="Browse", command=select_file)
file_btn.pack()

tk.Label(root, text="Similarity Threshold (70-90):").pack()
threshold_slider = tk.Scale(root, from_=70, to=90, orient="horizontal")
threshold_slider.set(80)  # Default threshold
threshold_slider.pack()

process_btn = tk.Button(root, text="Process File", command=process_file)
process_btn.pack()

root.mainloop()
