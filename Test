import pandas as pd
import re
import json
from tkinter import Tk, filedialog, simpledialog

# === CONFIGURATION ===
ACTOR_TAG = "en-us"  # Change this to whatever prefix is used instead of 'en-us' later
COLUMN_NAME = "Ful tran"  # You can change this to match the column you want
DEFAULT_FILENAME = "new_output_test.json"
# ======================

# === GUI Setup ===
root = Tk()
root.withdraw()

# Ask user for custom answer phrase
custom_answer = simpledialog.askstring("Custom Answer", "Enter the phrase to include in the answer (e.g., TEST1):")
if not custom_answer:
    print("No input provided. Exiting.")
    exit()

# Select Excel file
excel_file_path = filedialog.askopenfilename(title="Select Excel file", filetypes=[("Excel files", "*.xlsx *.xls")])
if not excel_file_path:
    print("No file selected. Exiting.")
    exit()

# Select save path
save_path = filedialog.asksaveasfilename(
    title="Save JSON output as...",
    defaultextension=".json",
    filetypes=[("JSON files", "*.json")],
    initialfile=DEFAULT_FILENAME
)
if not save_path:
    print("No save location selected. Exiting.")
    exit()

# === Read Excel and Build Output ===
df = pd.read_excel(excel_file_path)
output_data = []

for raw in df[COLUMN_NAME].dropna():
    lines = str(raw).strip().splitlines()
    if len(lines) >= 3:
        # Extract 3rd line
        target_line = lines[2].strip()

        # Match only if it starts with the actor tag (e.g., "en-us:")
        if target_line.lower().startswith(f"{ACTOR_TAG.lower()}:"):
            cleaned = re.sub(f'^{ACTOR_TAG}[:\s]*', '', target_line, flags=re.IGNORECASE).strip()

            block = {
                "QAPairs": [
                    {"Question": "", "Answer": [".*", ".*"], "clock": 60, "ops": "mathces", "Negative": False},
                    {"Question": cleaned, "Answer": [f"I see you {custom_answer}"], "Tim": 60, "Ope": "mathces", "Neg": False}
                ],
                "Sub": "sub",
                "dom": "",
                "timot": 300,
                "initb": {}
            }

            output_data.append(block)
        else:
            print(f"Skipping line: Third line doesn't start with '{ACTOR_TAG}:' — '{target_line}'")
    else:
        print(f"Skipping cell: Less than 3 lines found — '{raw}'")

# === Save Output as JSON ===
with open(save_path, "w", encoding="utf-8") as f:
    json.dump(output_data, f, indent=4)

print(f"Generated {len(output_data)} entries. Data written to: {save_path}")
